SETUP:

New ASP.NET Web API Project

_ViewStart.cshtml
	comment out layout

App_Start
	RouteConfig.cs:
		update url to: "{*page}"
	WebApiConfig.cs:
		// changes Pascal C# classes and serializes into Json camelCase format
            	config.Formatters.JsonFormatter.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();

Site.css
	Add: [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak { display: none !important;}

NuGet Import:
	AngularJSCore
	AngularJSResource
	AngularJSRoute
	AngularJS UI Bootstrap

Models:
	Products.cs
		Enter product properties
	IdentityModels.cs (line 28)
		public IDbSet<Product> Products { get; set; }

API folder:
	 ProductsController.cs - add:
		ApplicationDbContext
		IList / return

Folders:
	ng-Views
		master.html
	ng-Apps
		app.js - add:
			routing to master partial page
		controllers.js - add:
			MasterController w/Product query	


Views / Home / Index.html - clear existing, then add:
	html:
		to html tag:  ng-app="StoreApp"
		after title tag:  <base href="/" /> (for partial page routing)
		to body tag: ng-controller="MasterController as masterC"
		to div tag: ng-view class="view" (insertion point for partial pages)
	css:
		bootstrap.min.css
		ui-bootstrap-csp.css
		Site.css
	script:
		angular.min.js
		angular-route.min.js
		angular-resource.min.js
		angular-ui/ui-bootstrap-tpls.min.js
		app.js
		controllers.js		

Package Manager Console: 
	Enable-Migration

Migration / Configuration.cs - add:
	Product Seed Data

Package Manager Console:
	Add Migration
	Update-database
	Confirm seed data in SQL Server Object Explorer

<<======>>

PRODUCT LIST:

Create CRUD pages under ngViews:
	list
	add
	details
	edit
	delete	

ngApps: 
	app.js: add routing to each page
	controllers.js: add controller for each CRUD

list.html:
	heading orderBy & sortBy
	productfilter field

Apply bootswatch theme

<<======>>

LOAD SPINNER for Products > list.html

<<======>>

USER DATABASE:	
	IdentityModels.cs: Add FirstName, LastName properties (line 14)
	AccountBindingModels.cs:  
		User properties - add under 'public class RegisterBindingModel'
			
	Configuration.cs:
	(seed data)
	
	(claims)
		var userStore = new UserStore<ApplicationUser>(context);
        var userManager = new ApplicationUserManager(userStore);

        if (userManager.FindByName(user.UserName) == null) {
           userManager.Create(user, "Secret123!");
           userManager.AddClaim(user.Id, new Claim("Admin", "true"));
        }
		
	AccountController (line 389/before Helpers:
		//GET claims 
        [Route("GetIsAdmin")]
        public bool GetIsAdmin ()
        {
            var user = this.User.Identity as ClaimsIdentity;
            return user.HasClaim("Admin", "true");
        }

		*ALSO add: FirstName = model.FirstName, LastName = model.LastName 
		to end of:  var user = new ApplicationUser() { UserName = model.Email, Email = model.Email} 
		
		**NOTE: cannot test claims until login is setup**

	Package Manager Console:
		Add Migration
		Update-database
		Confirm seed data in SQL Server Object Explorer

<<======>>

LOGIN & REGISTER SETUP
	Create html pages / links to navbar
	Add routing to app.js
	Add login & register to controllers.cs
		

**Check claims - F12 & login**
	Enter console log: sessionStorage.getItem
		Should return "true" when admin is logged in.
		Should return "null" when user is logged in.
	
	Restrict view of Admin button and f a link to Admin on menu controller:
		1st: add this function to the MenuController and ProductListController to show/hide Admin links 
			self.isAdmin = function () {
            return sessionStorage.getItem('isAdmin')
        }			
		Use ng-show="listC.isAdmin()" to list Delete/Edit link tags

<<======>>

LOGIN MODAL:
	Add modal.html template
	controllers.js:
		MASTER/HOME controller:
		Angular.module to include: $location, $http, $modal, then:
			//LoginController for login modal
			//this controller allows login page to continue to function without modal
			self.loginshowLoginModal = function () {
				$modal.open({
					animation: true,
					templateUrl: '/ngViews/modal.html',
					controller: 'LoginController',
					controllerAs: 'lc',
				})
			};
			//end modal section

		LOGIN controller:
		Angular.module to include: $location, $http, $modalInstance, then:
			//cancel modal
			self.template = '/ngViews/login.html'      
			self.cancel = function () {
            $modalInstance.close('close');
			};
			//end cancel modal

			Add after $location.path('/');
			})
            .then(function () {
                $modalInstance.dismiss('cancel')

		Edit Index.html login link:
			<li ng-if="!menu.showLogin()"><a ng-click="homeC.loginshowLoginModal()">Login</a></li>

<== NAV DROPDOWNS / MODAL: CSS / MEDIA QUERIES
	
	Added media queries to adjust for resizing of modal on smaller devices.
	Restyled modal heading, body and click to close font awesome icon
	Added custom favicon to <head>
	navbar-static-top to remove rounded corners on navbar



<== DELETE MODAL ==>

Add delete modal controller to list controller + $modal
Add cancel / dismiss to Delete controller + $modalInstance
change delete url:  enter ng-click 
Add 




		
		

		
		



		














	
	


